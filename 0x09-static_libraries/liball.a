!<arch>
0-isupper.c/    0           0     0     644     194       `
#include "holberton.h"
/**
 * _isupper - Print if a character is uppercase
 * Return: 0
 * @c: input a character
 */
int _isupper(int c)
{
	if (c >= 65 && c <= 90)
		return (1);

	return (0);
}
0-memset.c/     0           0     0     644     314       `
#include "holberton.h"
/**
 * _memset - fills memory with a constant byte
 * @s: string parameter
 * @b: char parameter
 * @n: integer parameter
 * Return: pinter to the memory area.
 */
char *_memset(char *s, char b, unsigned int n)
{

	unsigned int i;

	for (i = 0; i < n; i++)
	{
		s[i] = b;
	}

	return (s);
}
0-strcat.c/     0           0     0     644     477       `
#include "holberton.h"
/**
 * _strlen - print the size of a string
 * @s: char parameter
 * Return: 0
 */
int _strlen(char *s)
{
	int i;

	for (i = 0; s[i] != '\0'; i++)
	{

	}
	return (i);
}
/**
 * _strcat - concaenate two strings
 * @dest: parameter dest
 * @src: parameter source
 * Return: dest
 */
char *_strcat(char *dest, char *src)
{
	int i, j;

	i = _strlen(dest);
	for (j = 0; src[j] != '\0'; j++)
	{
		dest[i + j] = src[j];
	}
	dest[i + j] = '\0';
	return (dest);
}

100-atoi.c/     0           0     0     644     430       `
#include "holberton.h"
/**
 * _atoi - convert sing to an integer
 * @s: recive parameter
 * Return: Return if es number
 */
int _atoi(char *s)
{
	int i, sign, num, brk;

	num = 0;
	brk = 0;
	sign = -1;

	for (i = 0; s[i] != '\0'; i++)
	{
		if (s[i] == '-')
			sign *= -1;

		if (s[i] >= '0' && s[i] <= '9')
		{
			num *= 10;
			num -= (s[i] - '0');
			brk = 1;
		}
		else if (brk == 1)
			break;
	}
	num *= sign;
	return (num);
}
1-isdigit.c/    0           0     0     644     213       `
#include "holberton.h"
/**
 * _isdigit - Print if a character is uppercase
 * Return: 0
 * @c: input a character
 */
int _isdigit(int c)
{
	int a;

	if (c >= 48 && c <= 57)
		a = 1;
	else
		a = 0;

	return (a);
}

1-memcpy.c/     0           0     0     644     331       `
#include "holberton.h"
/**
 * _memcpy - function that copies memory area.
 * @dest: parameter destine
 * @src: parameter source
 * @n: integer parameter.
 * Return: destine parameter.
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}

	return (dest);
}

1-strncat.c/    0           0     0     644     539       `
#include "holberton.h"
/**
 * _strlen - return len of string
 * @s: parameter
 * Return:  len
 */
int _strlen(char *s)
{
	int i;

	for (i = 0; s[i] != '\0'; i++)
	{

	}
	return (i);
}
/**
 * _strncat - function to concatnate strings with n iytes
 * @dest: destinition for concatnation
 * @src: source of string
 * @n: int type for size of iyte
 * Return: dest
 */
char *_strncat(char *dest, char *src, int n)
{
	int len;
	int i;

	len = _strlen(dest);
	for (i = 0; i < n && src[i] != '\0'; i++)
		dest[len + i] = src[i];
	return (dest);
}

2-strchr.c/     0           0     0     644     339       `
#include "holberton.h"
#include <stddef.h>
/**
 * _strchr - function that locates a character in a string
 * @s: string parameter
 * @c: character
 * Return: character c in the string s
 */
char *_strchr(char *s, char c)
{
	while (*s != '\0')
	{
		if (*s == c)
			return (s);
		s++;
	}
	if (*s == c)
		return (s);
	else
		return (NULL);
}

2-strlen.c/     0           0     0     644     195       `
#include "holberton.h"
/**
 * _strlen - print the size of a string
 * @s: char parameter
 * Return: 0
 */
int _strlen(char *s)
{
	int i, c;

	for (i = 0; s[i] != '\0'; i++)
		c++;
	return (c);
}

2-strncpy.c/    0           0     0     644     336       `
#include "holberton.h"
/**
 * _strncpy - copies a string
 * @dest: - parameter destine
 * @src: - parameter source
 * @n: parameter integer
 * Return: dest
 */
char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; i < n && src[i] != '\0'; i++)
		dest[i] = src[i];
	for ( ; i < n; i++)
		dest[i] = '\0';
	return (dest);
}
3-islower.c/    0           0     0     644     192       `
#include "holberton.h"
/**
 * _islower - prints if is lowercase
 * @c: is parameter
 * Return: 0
*/
int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
	{
		return (1);
	}
	else
		return (0);

}
3-puts.c/       0           0     0     644     213       `
#include "holberton.h"
/**
 * _puts - prints a string, followed by a new line.
 * @str: input string to print.
 */
void _puts(char *str)
{
	while (*str != '\0')
	{
		_putchar(*str);
		str++;
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     326       `
#include "holberton.h"
/**
 * _strcmp - compares two strings
 * @s1: first string
 * @s2: second string
 * Return: 0 always
 */
int _strcmp(char *s1, char *s2)
{
	int i;

	for (i = 0; s1[i] != '\0'; i++)
	{
		if (s1[i] > s2[i])
			return (s1[i] - s2[i]);
		else if (s1[i] < s2[i])
			return (s1[i] - s2[i]);
	}
	return (0);
}
3-strspn.c/     0           0     0     644     398       `
#include "holberton.h"
/**
 * _strspn - gets the length of a prefix substring
 * @s: string parameter
 * @accept: char accept
 * Return: the number of bytes in the initial segment
 */
unsigned int _strspn(char *s, char *accept)
{
	int i, j, c;

	for (i = 0; s[i]; i++)
	{
		c = 0;
		for (j = 0; accept[j]; j++)
		{
			if (s[i] == accept[j])
				c = 1;
		}
		if (c == 0)
			break;
	}
	return (i);
}
4-isalpha.c/    0           0     0     644     232       `
#include "holberton.h"
/**
 * _isalpha - prints if the caracter is alphabet
 * @c: is parameter
 * Return: 0
*/
int _isalpha(int c)
{
	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
	{
		return (1);
	}
	else
		return (0);

}
4-strpbrk.c/    0           0     0     644     402       `
#include "holberton.h"
#include <stddef.h>
/**
 * _strpbrk - function that searches a string for any of a set of bytes
 * @s: string parameter
 * @accept: string accepte
 * Return: marches one of the byte
 */
char *_strpbrk(char *s, char *accept)
{
	int i, j;

	for (i = 0; s[i] != '\0'; i++)
	{
		for (j = 0; accept[j] != '\0'; j++)
			if (*s == accept[j])
				return (s);
		s++;
	}
	return (NULL);
}
5-strstr.c/     0           0     0     644     611       `
#include "holberton.h"
#include <stdlib.h>

/**
 * _strstr - finds the first occurence of the substring needle
 * in the string haystack
 * @haystack: string to search
 * @needle: string to find
 * Return: pointer to the beginning of the located substring
 */


char *_strstr(char *haystack, char *needle)
{

	while (*haystack != '\0')
	{
		char *beginning = haystack;
		char *pattern = needle;

		while (*pattern == *haystack && *pattern != '\0'
		       && *haystack != '\0')
		{
			haystack++;
			pattern++;
		}
		if (*pattern == '\0')
			return (beginning);
		haystack = beginning + 1;
	}
	return (NULL);
}

6-abs.c/        0           0     0     644     192       `
#include "holberton.h"
/**
 * _abs - function that compute absolute value of an integer
 * @i: is a parameter
 * Return: 0
 */
int _abs(int i)
{
	if (i < 0)
	{
		i = i * -1;
	}
	return (i);
}
9-strcpy.c/     0           0     0     644     270       `
#include "holberton.h"
/**
 * _strcpy - copie a string
 * @dest: destine of copy
 * @src: source of copy
 * Return: return copie
 */
char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; src[i] != '\0'; i++)
		dest[i] = src[i];
	dest[i] = '\0';
	return (dest);
}
_putchar.c/     0           0     0     644     200       `
#include <unistd.h>
/**
 * _putchar - writes the character c to std out.
 * @c: the character to print
 * Return: 1 on success.
 * on error, -1
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}
